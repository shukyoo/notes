但程序员的真正绩效是他的competence，这不是一个容易量化的概念。competence可以是创造性的解决技术或业务问题，
可以是紧张项目开发中爆发的个人效率，可以是长期和别的部门对接时候的影响力，可以是永远不成为bottleneck的自我管理能力，
可以是因为个人实力带给项目团队的确定性，可以是在需要的时候提供某个特别具体的技术方案或者理念与实践，
可以是在危机的时候愿意投入自己时间到非自己领域的团队精神，可以是写出的东西给公司带来的无形效益，
可以是带领新人大大加速他们的融入，也可以是一串充满灵感的优质代码 ...

第二是强调个体责任，减少项目调度，尽量让每个程序员有一块自己的领域，是某一个业务或者技术部分的专家，
比如A做mobile端的开发，就会尽量让他把mobile app做过瘾了为止，没有特殊情况，不轻易他随机调到别的部分。
如果每个人的中长期权责是清楚的，那么绩效考核也会是清楚的，每个人能说出自己工作的纵向成果，
比如A前六个月对mobile app完成了关键性的重构，使用了更新更快的技术，核心代码的效率有了大幅提升，用户体验有明显改善。
这些东西他不说你也知道，因为分工的明确，你自己也很好跟踪，peer之间也对对方干了什么取得了什么成果十分清楚，这样就为考核系统的透明化提供了基础，透明意味着公平与效率。


客观依据和主观依据
这里的主观依据，现在的kpi里的那些是一种风格，那段话是另外一种风格，还有其它的，所以这里其实定义的是主观依据是什么
或者我们可以跟实际情况看一下，比如xxx，xx，leader主要是依据什么的想法去判断谁好谁坏，就是这样

客观：
线上bug分类定性定义

